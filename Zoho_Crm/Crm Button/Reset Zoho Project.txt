try 
{
	mess = "";
	deal_data = zoho.crm.getRecordById("Deals",Sp_Id);
	ZProj_id = deal_data.get("Zoho_Projects_Project_ID");
	Task_Assignment_Trigger = deal_data.get("Task_Owner_Assignment");
	Task_Assignment_Done = deal_data.get("Task_Assignment_Done");
	New_Process = deal_data.get("Testing");
	Created_Date = deal_data.get("Created_Time").toDate();
	Closing_Date = deal_data.get("Closing_Date");
	TransitionsIDs = deal_data.get("Blueprint_Transitions_IDs").toMap();
	if(ZProj_id == null && New_Process == false)
	{
		mess = "Project does not exist on Zoho Projects. Please use Migrate Project button to create a project";
	}
	if(ZProj_id != null && New_Process == true && Task_Assignment_Trigger == true && Task_Assignment_Done == true)
	{
		mess = "Project Reset is not needed. Project with all tasks already exists on Zoho Projects";
	}
	if(ZProj_id != null && New_Process == true && Task_Assignment_Trigger == true && Task_Assignment_Done == false || ZProj_id == null && New_Process == true && Task_Assignment_Trigger == false && Task_Assignment_Done == false)
	{
		if(ZProj_id != null)
		{
			////////////////////////////////Delete Zoho Project ///////////////////////////////////////
			Delete_Proj = invokeurl
			[
				url :"https://projectsapi.zoho.com/restapi/portal/666337121/projects/" + ZProj_id + "/"
				type :DELETE
				connection:"zohoprojectcall"
			];
			info Delete_Proj;
		}
		///////////////////////////////////////////////////////////////////////////////////////////////
		Deal_name = deal_data.get("Deal_Name");
		Bid_Deal = deal_data.get("Bid_Project");
		if(deal_data.get("Workflow") != null)
		{
			workflow_id = deal_data.get("Workflow").get("id");
			work_setup = zoho.crm.getRecordById("Workflow_Setup",workflow_id);
			Selected_template = work_setup.get("Template_ID");
			info "Template ID: " + Selected_template;
			if(Selected_template != null)
			{
				name_P_ID = deal_data.get("Project_ID").toString();
				customer = deal_data.get("Account_Name");
				if(customer != null)
				{
					name_customer = customer.get("name");
					////////////////////////////////////////////////////////////
					if(name_customer.len() > 20)
					{
						name_customer = name_customer.subString(0,20);
					}
					///////////////////////////////////////////////////
					location = deal_data.get("Service_Locations");
					info location;
					if(location != null)
					{
						location_name = location.get("name");
						street_address = location_name.getPrefix(",");
						if(street_address != null)
						{
							if(street_address.len() > 50)
							{
								street_address = street_address.subString(0,50);
							}
						}
						else
						{
							if(location_name.len() > 50)
							{
								street_address = location_name.subString(0,50);
							}
							else
							{
								street_address = location_name;
							}
						}
					}
					else
					{
						street_address = "";
					}
					///////////////////////////////////////////////////////////////////
					if(Bid_Deal == true)
					{
						project_name = Deal_name;
						if(project_name.len() > 100)
						{
							project_name = project_name.subString(0,99);
						}
						else
						{
							project_name = project_name;
						}
					}
					else
					{
						project_name = name_customer + " / " + street_address + " / " + name_P_ID;
					}
					info project_name;
					Projet_manager = zoho.crm.getRecordById("users",deal_data.get("Owner").get("id")).get("users").toMap().get("zuid");
					Production_Manager_id = deal_data.get("Production_Manager");
					if(Production_Manager_id != null)
					{
						Production_Manager_i = Production_Manager_id.get("id");
						Production_Manager = zoho.crm.getRecordById("users",Production_Manager_i).get("users").toMap().get("zuid");
					}
					sales_Rep_id = deal_data.get("Lead_Owner");
					if(sales_Rep_id != null)
					{
						sales_Rep_id_i = sales_Rep_id.get("id");
						sales_Rep = zoho.crm.getRecordById("users",sales_Rep_id_i).get("users").toMap().get("zuid");
					}
					info Projet_manager;
					info Production_Manager;
					info sales_Rep;
					proj_map = Map();
					// ---------------------------------------------  Project Fields
					proj_map.put("name",project_name);
					proj_map.put("owner",Projet_manager);
					proj_map.put("description",deal_data.get("Description"));
					proj_map.put("show_project_overview","yes");
					proj_map.put("template_id",Selected_template);
					proj_map.put("entityId",Sp_Id);
					proj_map.put("start_date",deal_data.get("Created_Time").toDate().toString("MM-dd-yyyy"));
					if(deal_data.get("Closing_Date") == null)
					{
						info "Closing Date is Empty";
					}
					else
					{
						Closing_Date = deal_data.get("Closing_Date").toDate();
						dt = deal_data.get("Closing_Date");
						dt1 = dt.toString("MM-dd-yyyy");
						proj_map.put("end_date",dt1);
					}
					if(Closing_Date = null || Closing_Date != null && Closing_Date > Created_Date)
					{
						// ------------------------------------------- Custom Fields ---------
						proj_map.put("UDF_CHAR1",Sp_Id);
						proj_map.put("UDF_USER2",Production_Manager);
						proj_map.put("UDF_USER4",Projet_manager);
						proj_map.put("UDF_USER3",sales_Rep);
						proj_map.put("UDF_CHAR3",deal_data.get("Project_ID"));
						//------------------------------------------Create Project------------------------------------
						//info proj_map;
						resp = invokeurl
						[
							url :"https://projectsapi.zoho.com/restapi/portal/666337121/projects/"
							type :POST
							parameters:proj_map
							connection:"zohoprojectcall"
						];
						info "New project Created: " + resp;
						// info resp.get("projects").get("id");
						// --------------------------------------    -------------------------
						Created_Project_data = resp.get("projects").toMap();
						ZProj_id = Created_Project_data.get("id_string");
						info "Zoho Project ID: " + ZProj_id;
						//--------------------------------------- Get Customer details
						customer_id = deal_data.get("Account_Name").get("id");
						customer_data = zoho.crm.getRecordById("Accounts",customer_id);
						info "Client ID: " + customer_data.get("zp_client_id");
						if(customer_data.get("zp_client_id") == null)
						{
							//----------------------------------- Create a Client Company
							param_Clint_Update = Map();
							param_Clint_Update.put("name",deal_data.get("Account_Name").get("name"));
							get_client_Update = invokeurl
							[
								url :"https://projectsapi.zoho.com/restapi/portal/666337121/clients/"
								type :POST
								parameters:param_Clint_Update
								connection:"zohoprojectcall"
							];
							client_id = get_client_Update.get("clients").get(0).get("id");
							////////////////// Updating ZP Client ID in CRM ////////////////////
							update_account_map = Map();
							update_account_map.put("zp_client_id",client_id.tostring());
							update_account_resp = zoho.crm.updateRecord("Accounts",customer_id,update_account_map);
						}
						else
						{
							client_id = customer_data.get("zp_client_id");
						}
						/////////////////////////////////------- Add Client Company to Project
						param_Clint_Update = Map();
						param_Clint_Update.put("company_id",client_id);
						param_Clint_Update.put("primary_client","yes");
						get_client_Update = invokeurl
						[
							url :"https://projectsapi.zoho.com/restapi/portal/666337121/projects/" + ZProj_id + "/clients/"
							type :POST
							parameters:param_Clint_Update
							connection:"zohoprojectcall"
						];
						//info "Link  client company with Project" + get_client_Update;
						// ---------------------------------------------- Link Project To Deals -----------
						mp = Map();
						mp.put("name",project_name);
						datalist = List();
						datalist.add(mp);
						datamp = Map();
						datamp.put("data",datalist);
						resp = invokeurl
						[
							url :"https://www.zohoapis.com/crm/v2/Potentials/" + Sp_Id + "/Zoho_Projects/" + ZProj_id
							type :POST
							parameters:datamp.toString()
							connection:"zohoprojectcall"
						];
						//info "Link Deal and ZProject" + resp;
						//------------------------------------------Re-Update Update Project for correct owner ------------------------------------
						update_map = Map();
						update_map.put("owner",Projet_manager);
						update_map.put("owner_id",Projet_manager);
						Update_resp = invokeurl
						[
							url :"https://projectsapi.zoho.com/restapi/portal/666337121/projects/" + ZProj_id + "/"
							type :POST
							parameters:update_map
							connection:"zohoprojectcall"
						];
						//info "Update project " + Update_resp;
						// --------------------------------------    -------------------------
						// info resp.get("data").get(0).get(1).get("id");
						update_crm_project = Map();
						// 			update_crm_project.put("Testing",true);
						// 			update_crm_project.put("Migrated_To_Projects",true);
						update_crm_project.put("Zoho_Projects_Project_ID",ZProj_id);
						update_crm_project.put("Estimated_Due_Date","");
						update_crm_project.put("Task_Owner_Assignment",false);
						update_crm_project.put("Task_Assignment_Done",false);
						update_crm_project.put("Tasks_Map","");
						update_crm_project.put("ZP_Main_Tasks","");
						update_crm_project.put("ZP_Sub_Tasks","");
						update_crm_project.put("ZP_ALL_Tasks","");
						//update_crm_project.put("Stage","Pre-Production");
						resp = zoho.crm.updateRecord("Deals",Sp_Id,update_crm_project);
						info resp;
						///////////////////////// Updating transition /////////////////////
						info zoho.crm.updateRecord("Deals",Sp_Id,{"Disable_Transition":false});
						dataMap = Map();
						blueprint1 = Map();
						blueprint1.put("transition_id",TransitionsIDs.get("Pre-Production"));
						blueprint1.put("data",dataMap);
						blueprintList = List();
						blueprintList.add(blueprint1);
						param = Map();
						param.put("blueprint",blueprintList);
						response = invokeurl
						[
							url :"https://www.zohoapis.com/crm/v2/deals/" + Sp_Id + "/actions/blueprint"
							type :PUT
							parameters:param.toString()
							connection:"zoho_crm"
						];
						info response;
						///////////////////////////////
						if(ZProj_id == "")
						{
							mess = "Project did not Reset. Please Contact Administrator";
							////////////////////////////////////////////////////
							// 							sendmail
							//                             [
							// 									from :zoho.adminuserid
							// 									to :"erp@blinksigns.com"
							// 									subject :"Reset Project - Project Not Created / Sign Project / Button / CRM"
							// 									message :"ID: " + Sp_Id + " Root Cause: " + e
							//                             ]
						}
						else
						{
							//  ----------------------------------------------------  On Sucsess  Note Creation
							User_name = zoho.loginuser;
							Title = "Project Reset";
							Content = "Project ID: \"" + name_P_ID + "\" has been reset by " + User_name;
							mp = Map();
							mp.put("Parent_Id",Sp_Id);
							mp.put("Note_Title",Title);
							mp.put("Note_Content",Content);
							mp.put("$se_module","Deals");
							create_note = zoho.crm.createRecord("Notes",mp);
							//info create_note + "Note Returned";
							// --------------------------------------------------------------------------------
							mess = "Project Reset. Please wait for few minutes for all tasks to be assigned correctly.";
						}
					}
					else
					{
						mess = "Closing Date should be greater than the project Start Date. Please update closing date for this Project.";
					}
				}
				else
				{
					mess = "No Customer is linked to this Project. Please add a customer on the project and use the RESET button again.";
				}
			}
			else
			{
				mess = "Workflow / Template currently does not exist on Zoho Projects";
			}
		}
		else
		{
			mess = "Please select a Project Workflow on this Sign Project";
		}
	}
}
catch (e)
{
	sendmail
	[
		from :zoho.adminuserid
		to :"erp@blinksigns.com"
		subject :"Reset Project / Sign Project / Button / CRM"
		message :"ID: " + Sp_Id + " Root Cause: " + e
	]
}
return mess;